{"stats":{"totalMutantsCount":37,"killedCount":2,"notCoveredCount":26,"escapedCount":9,"errorCount":0,"skippedCount":0,"timeOutCount":0,"msi":5.41,"mutationCodeCoverage":29.73,"coveredCodeMsi":18.18},"escaped":[{"mutator":{"mutatorName":"GreaterThan","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax >= 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php","originalStartLine":34},"diff":"--- Original\n+++ New\n@@ @@\n     private function getRealTaxValue(float $tax) : float\n     {\n         $increment = self::DEFAULT_INCREMENT_VALUE;\n-        if ($tax > 5) {\n+        if ($tax >= 5) {\n             $increment = $this->client->getIncrementValue($tax);\n         }\n         return 1 + ($increment + $tax) \/ 100;","processOutput":"PHPUnit 9.5.4-63-g305d86701 by Sebastian Bergmann and contributors.\n\nTax Calculator (Unit\\Domain\\Services\\TaxCalculator)\n \u2714 Calculate function with data set \"menor que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"igual que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"maior que o esperado para taxa dinamica\"\n\nTime: 00:00.006, Memory: 6.00 MB\n\nOK (3 tests, 6 assertions)"},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 0 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n         if ($tax > 5) {\n             $increment = $this->client->getIncrementValue($tax);\n         }\n-        return 1 + ($increment + $tax) \/ 100;\n+        return 0 + ($increment + $tax) \/ 100;\n     }\n     \/**\n      * @param float $amount","processOutput":"PHPUnit 9.5.4-63-g305d86701 by Sebastian Bergmann and contributors.\n\nTax Calculator (Unit\\Domain\\Services\\TaxCalculator)\n \u2714 Calculate function with data set \"menor que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"igual que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"maior que o esperado para taxa dinamica\"\n\nTime: 00:00.006, Memory: 6.00 MB\n\nOK (3 tests, 6 assertions)"},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 2 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n         if ($tax > 5) {\n             $increment = $this->client->getIncrementValue($tax);\n         }\n-        return 1 + ($increment + $tax) \/ 100;\n+        return 2 + ($increment + $tax) \/ 100;\n     }\n     \/**\n      * @param float $amount","processOutput":"PHPUnit 9.5.4-63-g305d86701 by Sebastian Bergmann and contributors.\n\nTax Calculator (Unit\\Domain\\Services\\TaxCalculator)\n \u2714 Calculate function with data set \"menor que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"igual que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"maior que o esperado para taxa dinamica\"\n\nTime: 00:00.006, Memory: 6.00 MB\n\nOK (3 tests, 6 assertions)"},{"mutator":{"mutatorName":"Plus","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment - $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n         if ($tax > 5) {\n             $increment = $this->client->getIncrementValue($tax);\n         }\n-        return 1 + ($increment + $tax) \/ 100;\n+        return 1 + ($increment - $tax) \/ 100;\n     }\n     \/**\n      * @param float $amount","processOutput":"PHPUnit 9.5.4-63-g305d86701 by Sebastian Bergmann and contributors.\n\nTax Calculator (Unit\\Domain\\Services\\TaxCalculator)\n \u2714 Calculate function with data set \"menor que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"igual que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"maior que o esperado para taxa dinamica\"\n\nTime: 00:00.006, Memory: 6.00 MB\n\nOK (3 tests, 6 assertions)"},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 99;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n         if ($tax > 5) {\n             $increment = $this->client->getIncrementValue($tax);\n         }\n-        return 1 + ($increment + $tax) \/ 100;\n+        return 1 + ($increment + $tax) \/ 99;\n     }\n     \/**\n      * @param float $amount","processOutput":"PHPUnit 9.5.4-63-g305d86701 by Sebastian Bergmann and contributors.\n\nTax Calculator (Unit\\Domain\\Services\\TaxCalculator)\n \u2714 Calculate function with data set \"menor que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"igual que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"maior que o esperado para taxa dinamica\"\n\nTime: 00:00.006, Memory: 6.00 MB\n\nOK (3 tests, 6 assertions)"},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 101;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n         if ($tax > 5) {\n             $increment = $this->client->getIncrementValue($tax);\n         }\n-        return 1 + ($increment + $tax) \/ 100;\n+        return 1 + ($increment + $tax) \/ 101;\n     }\n     \/**\n      * @param float $amount","processOutput":"PHPUnit 9.5.4-63-g305d86701 by Sebastian Bergmann and contributors.\n\nTax Calculator (Unit\\Domain\\Services\\TaxCalculator)\n \u2714 Calculate function with data set \"menor que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"igual que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"maior que o esperado para taxa dinamica\"\n\nTime: 00:00.006, Memory: 6.00 MB\n\nOK (3 tests, 6 assertions)"},{"mutator":{"mutatorName":"Division","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) * 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n         if ($tax > 5) {\n             $increment = $this->client->getIncrementValue($tax);\n         }\n-        return 1 + ($increment + $tax) \/ 100;\n+        return 1 + ($increment + $tax) * 100;\n     }\n     \/**\n      * @param float $amount","processOutput":"PHPUnit 9.5.4-63-g305d86701 by Sebastian Bergmann and contributors.\n\nTax Calculator (Unit\\Domain\\Services\\TaxCalculator)\n \u2714 Calculate function with data set \"menor que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"igual que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"maior que o esperado para taxa dinamica\"\n\nTime: 00:00.006, Memory: 6.00 MB\n\nOK (3 tests, 6 assertions)"},{"mutator":{"mutatorName":"Plus","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 - ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n         if ($tax > 5) {\n             $increment = $this->client->getIncrementValue($tax);\n         }\n-        return 1 + ($increment + $tax) \/ 100;\n+        return 1 - ($increment + $tax) \/ 100;\n     }\n     \/**\n      * @param float $amount","processOutput":"PHPUnit 9.5.4-63-g305d86701 by Sebastian Bergmann and contributors.\n\nTax Calculator (Unit\\Domain\\Services\\TaxCalculator)\n \u2714 Calculate function with data set \"menor que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"igual que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"maior que o esperado para taxa dinamica\"\n\nTime: 00:00.006, Memory: 6.00 MB\n\nOK (3 tests, 6 assertions)"},{"mutator":{"mutatorName":"Multiplication","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount \/ $this->getRealTaxValue($tax);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php","originalStartLine":47},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function calculate(float $amount, float $tax) : float\n     {\n-        return $amount * $this->getRealTaxValue($tax);\n+        return $amount \/ $this->getRealTaxValue($tax);\n     }\n }","processOutput":"PHPUnit 9.5.4-63-g305d86701 by Sebastian Bergmann and contributors.\n\nTax Calculator (Unit\\Domain\\Services\\TaxCalculator)\n \u2714 Calculate function with data set \"menor que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"igual que o esperado para taxa dinamica\"\n \u2714 Calculate function with data set \"maior que o esperado para taxa dinamica\"\n\nTime: 00:00.006, Memory: 6.00 MB\n\nOK (3 tests, 6 assertions)"}],"timeouted":[],"killed":[{"mutator":{"mutatorName":"GreaterThanNegotiation","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax <= 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php","originalStartLine":34},"diff":"--- Original\n+++ New\n@@ @@\n     private function getRealTaxValue(float $tax) : float\n     {\n         $increment = self::DEFAULT_INCREMENT_VALUE;\n-        if ($tax > 5) {\n+        if ($tax <= 5) {\n             $increment = $this->client->getIncrementValue($tax);\n         }\n         return 1 + ($increment + $tax) \/ 100;","processOutput":"PHPUnit 9.5.4-63-g305d86701 by Sebastian Bergmann and contributors.\n\nTax Calculator (Unit\\Domain\\Services\\TaxCalculator)\n \u2718 Calculate function with data set \"menor que o esperado para taxa dinamica\"\n   \u2502\n   \u2502 App\\Domain\\Clients\\TaxManagerClientInterface::getIncrementValue(1.0): float was not expected to be called.\n   \u2502\n   \u2502 \/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php:30\n   \u2502 \/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php:41\n   \u2502 \/Users\/diegoferreira\/Projects\/picpay-php-test\/tests\/Unit\/Domain\/Services\/TaxCalculatorTest.php:33\n   \u2502\n\nTime: 00:00.017, Memory: 6.00 MB\n\n\nFAILURES!\nTests: 1, Assertions: 0, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    public function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\TaxManagerClientInterface;\nclass TaxCalculator\n{\n    private const DEFAULT_INCREMENT_VALUE = 3.14;\n    \/**\n     * @var TaxManagerClientInterface\n     *\/\n    private TaxManagerClientInterface $client;\n    \/**\n     * TaxCalculator constructor.\n     * @param TaxManagerClientInterface $client\n     *\/\n    public function __construct(TaxManagerClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    \/**\n     * @param float $tax\n     * @return float\n     *\/\n    private function getRealTaxValue(float $tax) : float\n    {\n        $increment = self::DEFAULT_INCREMENT_VALUE;\n        if ($tax > 5) {\n            $increment = $this->client->getIncrementValue($tax);\n        }\n        return 1 + ($increment + $tax) \/ 100;\n    }\n    \/**\n     * @param float $amount\n     * @param float $tax\n     * @return float\n     *\/\n    protected function calculate(float $amount, float $tax) : float\n    {\n        return $amount * $this->getRealTaxValue($tax);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TaxCalculator.php","originalStartLine":45},"diff":"--- Original\n+++ New\n@@ @@\n      * @param float $tax\n      * @return float\n      *\/\n-    public function calculate(float $amount, float $tax) : float\n+    protected function calculate(float $amount, float $tax) : float\n     {\n         return $amount * $this->getRealTaxValue($tax);\n     }\n }","processOutput":"PHPUnit 9.5.4-63-g305d86701 by Sebastian Bergmann and contributors.\n\nTax Calculator (Unit\\Domain\\Services\\TaxCalculator)\n \u2718 Calculate function with data set \"menor que o esperado para taxa dinamica\"\n   \u2502\n   \u2502 Error: Call to protected method App\\Domain\\Services\\TaxCalculator::calculate() from context 'Unit\\Domain\\Services\\TaxCalculatorTest'\n   \u2502\n   \u2502 \/Users\/diegoferreira\/Projects\/picpay-php-test\/tests\/Unit\/Domain\/Services\/TaxCalculatorTest.php:33\n   \u2502\n\nTime: 00:00.011, Memory: 6.00 MB\n\n\nERRORS!\nTests: 1, Assertions: 0, Errors: 1."}],"errored":[],"uncovered":[{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    protected function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":59},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return string\n      *\/\n-    public function getId() : string\n+    protected function getId() : string\n     {\n         return $this->id;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    protected function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":67},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param string $id\n      *\/\n-    public function setId(string $id) : void\n+    protected function setId(string $id) : void\n     {\n         $this->id = $id;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    protected function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":75},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return float\n      *\/\n-    public function getInitialAmount() : float\n+    protected function getInitialAmount() : float\n     {\n         return $this->initialAmount;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    protected function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":83},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param float $initialAmount\n      *\/\n-    public function setInitialAmount(float $initialAmount) : void\n+    protected function setInitialAmount(float $initialAmount) : void\n     {\n         $this->initialAmount = $initialAmount;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    protected function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":91},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return float\n      *\/\n-    public function getSellerTax() : float\n+    protected function getSellerTax() : float\n     {\n         return $this->sellerTax;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    protected function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":99},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param float $sellerTax\n      *\/\n-    public function setSellerTax(float $sellerTax) : void\n+    protected function setSellerTax(float $sellerTax) : void\n     {\n         $this->sellerTax = $sellerTax;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    protected function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":107},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return float\n      *\/\n-    public function getSlytherinPayTax() : float\n+    protected function getSlytherinPayTax() : float\n     {\n         return $this->slytherinPayTax;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    protected function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":115},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param float $slytherinPayTax\n      *\/\n-    public function setSlytherinPayTax(float $slytherinPayTax) : void\n+    protected function setSlytherinPayTax(float $slytherinPayTax) : void\n     {\n         $this->slytherinPayTax = $slytherinPayTax;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    protected function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":123},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return float\n      *\/\n-    public function getTotalTax() : float\n+    protected function getTotalTax() : float\n     {\n         return $this->totalTax;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    protected function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":131},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param float $totalTax\n      *\/\n-    public function setTotalTax(float $totalTax) : void\n+    protected function setTotalTax(float $totalTax) : void\n     {\n         $this->totalTax = $totalTax;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    protected function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":139},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return float\n      *\/\n-    public function getTotalAmount() : float\n+    protected function getTotalAmount() : float\n     {\n         return $this->totalAmount;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    protected function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":147},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param float $totalAmount\n      *\/\n-    public function setTotalAmount(float $totalAmount) : void\n+    protected function setTotalAmount(float $totalAmount) : void\n     {\n         $this->totalAmount = $totalAmount;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    protected function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":155},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return DateTime\n      *\/\n-    public function getCreatedDate() : DateTime\n+    protected function getCreatedDate() : DateTime\n     {\n         return $this->createdDate;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    protected function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":163},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param DateTime $createdDate\n      *\/\n-    public function setCreatedDate(DateTime $createdDate) : void\n+    protected function setCreatedDate(DateTime $createdDate) : void\n     {\n         $this->createdDate = $createdDate;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    protected function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":171},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return Seller\n      *\/\n-    public function getSeller() : Seller\n+    protected function getSeller() : Seller\n     {\n         return $this->seller;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    protected function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":179},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param Seller $seller\n      *\/\n-    public function setSeller(Seller $seller) : void\n+    protected function setSeller(Seller $seller) : void\n     {\n         $this->seller = $seller;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    protected function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":187},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return Buyer\n      *\/\n-    public function getBuyer() : Buyer\n+    protected function getBuyer() : Buyer\n     {\n         return $this->buyer;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    public function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Entities;\n\nuse DateTime;\nclass Transaction\n{\n    \/**\n     * @var string\n     *\/\n    private string $id;\n    \/**\n     * @var float\n     *\/\n    private float $initialAmount;\n    \/**\n     * @var float\n     *\/\n    private float $sellerTax;\n    \/**\n     * @var float\n     *\/\n    private float $slytherinPayTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalTax;\n    \/**\n     * @var float\n     *\/\n    private float $totalAmount;\n    \/**\n     * @var DateTime\n     *\/\n    private DateTime $createdDate;\n    \/**\n     * @var Seller\n     *\/\n    private Seller $seller;\n    \/**\n     * @var Buyer\n     *\/\n    private Buyer $buyer;\n    \/**\n     * @return string\n     *\/\n    public function getId() : string\n    {\n        return $this->id;\n    }\n    \/**\n     * @param string $id\n     *\/\n    public function setId(string $id) : void\n    {\n        $this->id = $id;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getInitialAmount() : float\n    {\n        return $this->initialAmount;\n    }\n    \/**\n     * @param float $initialAmount\n     *\/\n    public function setInitialAmount(float $initialAmount) : void\n    {\n        $this->initialAmount = $initialAmount;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSellerTax() : float\n    {\n        return $this->sellerTax;\n    }\n    \/**\n     * @param float $sellerTax\n     *\/\n    public function setSellerTax(float $sellerTax) : void\n    {\n        $this->sellerTax = $sellerTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getSlytherinPayTax() : float\n    {\n        return $this->slytherinPayTax;\n    }\n    \/**\n     * @param float $slytherinPayTax\n     *\/\n    public function setSlytherinPayTax(float $slytherinPayTax) : void\n    {\n        $this->slytherinPayTax = $slytherinPayTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalTax() : float\n    {\n        return $this->totalTax;\n    }\n    \/**\n     * @param float $totalTax\n     *\/\n    public function setTotalTax(float $totalTax) : void\n    {\n        $this->totalTax = $totalTax;\n    }\n    \/**\n     * @return float\n     *\/\n    public function getTotalAmount() : float\n    {\n        return $this->totalAmount;\n    }\n    \/**\n     * @param float $totalAmount\n     *\/\n    public function setTotalAmount(float $totalAmount) : void\n    {\n        $this->totalAmount = $totalAmount;\n    }\n    \/**\n     * @return DateTime\n     *\/\n    public function getCreatedDate() : DateTime\n    {\n        return $this->createdDate;\n    }\n    \/**\n     * @param DateTime $createdDate\n     *\/\n    public function setCreatedDate(DateTime $createdDate) : void\n    {\n        $this->createdDate = $createdDate;\n    }\n    \/**\n     * @return Seller\n     *\/\n    public function getSeller() : Seller\n    {\n        return $this->seller;\n    }\n    \/**\n     * @param Seller $seller\n     *\/\n    public function setSeller(Seller $seller) : void\n    {\n        $this->seller = $seller;\n    }\n    \/**\n     * @return Buyer\n     *\/\n    public function getBuyer() : Buyer\n    {\n        return $this->buyer;\n    }\n    \/**\n     * @param Buyer $buyer\n     *\/\n    protected function setBuyer(Buyer $buyer) : void\n    {\n        $this->buyer = $buyer;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Entities\/Transaction.php","originalStartLine":195},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param Buyer $buyer\n      *\/\n-    public function setBuyer(Buyer $buyer) : void\n+    protected function setBuyer(Buyer $buyer) : void\n     {\n         $this->buyer = $buyer;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Entities\\Transaction;\nclass FraudChecker\n{\n    public function check(Transaction $transaction) : bool\n    {\n        return false;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Entities\\Transaction;\nclass FraudChecker\n{\n    protected function check(Transaction $transaction) : bool\n    {\n        return false;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/FraudChecker.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n use App\\Domain\\Entities\\Transaction;\n class FraudChecker\n {\n-    public function check(Transaction $transaction) : bool\n+    protected function check(Transaction $transaction) : bool\n     {\n         return false;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Entities\\Transaction;\nclass FraudChecker\n{\n    public function check(Transaction $transaction) : bool\n    {\n        return false;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Entities\\Transaction;\nclass FraudChecker\n{\n    public function check(Transaction $transaction) : bool\n    {\n        return true;\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/FraudChecker.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function check(Transaction $transaction) : bool\n     {\n-        return false;\n+        return true;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\NotifierClientInterface;\nuse App\\Domain\\Entities\\Notification;\nclass Notifier\n{\n    \/**\n     * @var NotifierClientInterface\n     *\/\n    private NotifierClientInterface $client;\n    public function __construct(NotifierClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    public function notify(Notification $notification) : void\n    {\n        $this->client->notify($notification);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\NotifierClientInterface;\nuse App\\Domain\\Entities\\Notification;\nclass Notifier\n{\n    \/**\n     * @var NotifierClientInterface\n     *\/\n    private NotifierClientInterface $client;\n    public function __construct(NotifierClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    protected function notify(Notification $notification) : void\n    {\n        $this->client->notify($notification);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/Notifier.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $this->client = $client;\n     }\n-    public function notify(Notification $notification) : void\n+    protected function notify(Notification $notification) : void\n     {\n         $this->client->notify($notification);\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\NotifierClientInterface;\nuse App\\Domain\\Entities\\Notification;\nclass Notifier\n{\n    \/**\n     * @var NotifierClientInterface\n     *\/\n    private NotifierClientInterface $client;\n    public function __construct(NotifierClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    public function notify(Notification $notification) : void\n    {\n        $this->client->notify($notification);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Clients\\NotifierClientInterface;\nuse App\\Domain\\Entities\\Notification;\nclass Notifier\n{\n    \/**\n     * @var NotifierClientInterface\n     *\/\n    private NotifierClientInterface $client;\n    public function __construct(NotifierClientInterface $client)\n    {\n        $this->client = $client;\n    }\n    public function notify(Notification $notification) : void\n    {\n        \n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/Notifier.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function notify(Notification $notification) : void\n     {\n-        $this->client->notify($notification);\n+        \n     }\n }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Entities\\Transaction;\nuse App\\Domain\\Repositories\\TransactionRepositoryInterface;\nuse DateTime;\nuse Exception;\nclass TransactionHandler\n{\n    \/**\n     * @var TransactionRepositoryInterface\n     *\/\n    private TransactionRepositoryInterface $repository;\n    \/**\n     * @var TaxCalculator\n     *\/\n    private TaxCalculator $taxCalculator;\n    \/**\n     * @var FraudChecker\n     *\/\n    private FraudChecker $fraudChecker;\n    \/**\n     * @var Notifier\n     *\/\n    private Notifier $notifier;\n    public function __construct(TransactionRepositoryInterface $repository, TaxCalculator $taxCalculator, FraudChecker $fraudChecker, Notifier $notifier)\n    {\n        $this->repository = $repository;\n        $this->taxCalculator = $taxCalculator;\n        $this->fraudChecker = $fraudChecker;\n        $this->notifier = $notifier;\n    }\n    \/**\n     * @throws Exception\n     *\/\n    public function create(Transaction $transaction) : Transaction\n    {\n        \/**\n         * Draco: Aqui valida se pode fazer a transa\u00e7\u00e3o, a Granger falou que tem uns chamados estranhos dizendo que\n         * o cliente t\u00e1 conseguindo sacar dinheiro da carteira do lojista, mas com certeza \u00e9 culpa da empresa\n         * que faz a analise anti fraude, eles s\u00e3o trouxas n\u00e9? Meu sistema n\u00e3o pode fazer nada pra resolver isso.\n         *\/\n        if (!$this->fraudChecker->check($transaction)) {\n            throw new Exception(\"Deu erro aqui.\");\n        }\n        \/**\n         * Goyle: esse trecho de c\u00f3digo calcula o valor total com a taxa do sonserinapay, pra saber o valor total da taxa tem\n         * que calcular inicialAmount + sellerTaxa - valorTotalWithTax = taxaSonserinaPay\n         * pra saber o total de taxas tem que somar a taxa do sonserinapay com a taxa do lojista\n         * mas eu n\u00e3o sei pra que isso serve n\u00e3o, s\u00f3 fix o que o Draco me mandou fazer\n         *\/\n        $totalValueComTaxas = $this->taxCalculator->calculate($transaction->getInitialAmount(), $transaction->getSellerTax());\n        \/**\n         * Draco: Salva a data de cria\u00e7\u00e3o da transa\u00e7\u00e3o\n         *\/\n        $transaction->setCreatedDate(new DateTime());\n        \/**\n         * Draco: Era pra notificar o cliente e o lojista n\u00e9? Mas esse cara t\u00e1 dando problema, com certeza\n         * \u00e9 culpa do Crabbe que n\u00e3o fez a classe de notifica\u00e7\u00e3o direito\n         *\/\n        \/\/        $this->notifier->notify($transaction);\n        \/**\n         * Crabbe: Aqui salva a transa\u00e7\u00e3o\n         * Draco: As vezes a gente da erro na hora de salvar ai a gente j\u00e1 mandou notifica\u00e7\u00e3o pro cliente, mas paci\u00eancia n\u00e9?\n         *\/\n        return $this->repository->save($transaction);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Entities\\Transaction;\nuse App\\Domain\\Repositories\\TransactionRepositoryInterface;\nuse DateTime;\nuse Exception;\nclass TransactionHandler\n{\n    \/**\n     * @var TransactionRepositoryInterface\n     *\/\n    private TransactionRepositoryInterface $repository;\n    \/**\n     * @var TaxCalculator\n     *\/\n    private TaxCalculator $taxCalculator;\n    \/**\n     * @var FraudChecker\n     *\/\n    private FraudChecker $fraudChecker;\n    \/**\n     * @var Notifier\n     *\/\n    private Notifier $notifier;\n    public function __construct(TransactionRepositoryInterface $repository, TaxCalculator $taxCalculator, FraudChecker $fraudChecker, Notifier $notifier)\n    {\n        $this->repository = $repository;\n        $this->taxCalculator = $taxCalculator;\n        $this->fraudChecker = $fraudChecker;\n        $this->notifier = $notifier;\n    }\n    \/**\n     * @throws Exception\n     *\/\n    protected function create(Transaction $transaction) : Transaction\n    {\n        \/**\n         * Draco: Aqui valida se pode fazer a transa\u00e7\u00e3o, a Granger falou que tem uns chamados estranhos dizendo que\n         * o cliente t\u00e1 conseguindo sacar dinheiro da carteira do lojista, mas com certeza \u00e9 culpa da empresa\n         * que faz a analise anti fraude, eles s\u00e3o trouxas n\u00e9? Meu sistema n\u00e3o pode fazer nada pra resolver isso.\n         *\/\n        if (!$this->fraudChecker->check($transaction)) {\n            throw new Exception(\"Deu erro aqui.\");\n        }\n        \/**\n         * Goyle: esse trecho de c\u00f3digo calcula o valor total com a taxa do sonserinapay, pra saber o valor total da taxa tem\n         * que calcular inicialAmount + sellerTaxa - valorTotalWithTax = taxaSonserinaPay\n         * pra saber o total de taxas tem que somar a taxa do sonserinapay com a taxa do lojista\n         * mas eu n\u00e3o sei pra que isso serve n\u00e3o, s\u00f3 fix o que o Draco me mandou fazer\n         *\/\n        $totalValueComTaxas = $this->taxCalculator->calculate($transaction->getInitialAmount(), $transaction->getSellerTax());\n        \/**\n         * Draco: Salva a data de cria\u00e7\u00e3o da transa\u00e7\u00e3o\n         *\/\n        $transaction->setCreatedDate(new DateTime());\n        \/**\n         * Draco: Era pra notificar o cliente e o lojista n\u00e9? Mas esse cara t\u00e1 dando problema, com certeza\n         * \u00e9 culpa do Crabbe que n\u00e3o fez a classe de notifica\u00e7\u00e3o direito\n         *\/\n        \/\/        $this->notifier->notify($transaction);\n        \/**\n         * Crabbe: Aqui salva a transa\u00e7\u00e3o\n         * Draco: As vezes a gente da erro na hora de salvar ai a gente j\u00e1 mandou notifica\u00e7\u00e3o pro cliente, mas paci\u00eancia n\u00e9?\n         *\/\n        return $this->repository->save($transaction);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TransactionHandler.php","originalStartLine":50},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @throws Exception\n      *\/\n-    public function create(Transaction $transaction) : Transaction\n+    protected function create(Transaction $transaction) : Transaction\n     {\n         \/**\n          * Draco: Aqui valida se pode fazer a transa\u00e7\u00e3o, a Granger falou que tem uns chamados estranhos dizendo que","processOutput":""},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Entities\\Transaction;\nuse App\\Domain\\Repositories\\TransactionRepositoryInterface;\nuse DateTime;\nuse Exception;\nclass TransactionHandler\n{\n    \/**\n     * @var TransactionRepositoryInterface\n     *\/\n    private TransactionRepositoryInterface $repository;\n    \/**\n     * @var TaxCalculator\n     *\/\n    private TaxCalculator $taxCalculator;\n    \/**\n     * @var FraudChecker\n     *\/\n    private FraudChecker $fraudChecker;\n    \/**\n     * @var Notifier\n     *\/\n    private Notifier $notifier;\n    public function __construct(TransactionRepositoryInterface $repository, TaxCalculator $taxCalculator, FraudChecker $fraudChecker, Notifier $notifier)\n    {\n        $this->repository = $repository;\n        $this->taxCalculator = $taxCalculator;\n        $this->fraudChecker = $fraudChecker;\n        $this->notifier = $notifier;\n    }\n    \/**\n     * @throws Exception\n     *\/\n    public function create(Transaction $transaction) : Transaction\n    {\n        \/**\n         * Draco: Aqui valida se pode fazer a transa\u00e7\u00e3o, a Granger falou que tem uns chamados estranhos dizendo que\n         * o cliente t\u00e1 conseguindo sacar dinheiro da carteira do lojista, mas com certeza \u00e9 culpa da empresa\n         * que faz a analise anti fraude, eles s\u00e3o trouxas n\u00e9? Meu sistema n\u00e3o pode fazer nada pra resolver isso.\n         *\/\n        if (!$this->fraudChecker->check($transaction)) {\n            throw new Exception(\"Deu erro aqui.\");\n        }\n        \/**\n         * Goyle: esse trecho de c\u00f3digo calcula o valor total com a taxa do sonserinapay, pra saber o valor total da taxa tem\n         * que calcular inicialAmount + sellerTaxa - valorTotalWithTax = taxaSonserinaPay\n         * pra saber o total de taxas tem que somar a taxa do sonserinapay com a taxa do lojista\n         * mas eu n\u00e3o sei pra que isso serve n\u00e3o, s\u00f3 fix o que o Draco me mandou fazer\n         *\/\n        $totalValueComTaxas = $this->taxCalculator->calculate($transaction->getInitialAmount(), $transaction->getSellerTax());\n        \/**\n         * Draco: Salva a data de cria\u00e7\u00e3o da transa\u00e7\u00e3o\n         *\/\n        $transaction->setCreatedDate(new DateTime());\n        \/**\n         * Draco: Era pra notificar o cliente e o lojista n\u00e9? Mas esse cara t\u00e1 dando problema, com certeza\n         * \u00e9 culpa do Crabbe que n\u00e3o fez a classe de notifica\u00e7\u00e3o direito\n         *\/\n        \/\/        $this->notifier->notify($transaction);\n        \/**\n         * Crabbe: Aqui salva a transa\u00e7\u00e3o\n         * Draco: As vezes a gente da erro na hora de salvar ai a gente j\u00e1 mandou notifica\u00e7\u00e3o pro cliente, mas paci\u00eancia n\u00e9?\n         *\/\n        return $this->repository->save($transaction);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Entities\\Transaction;\nuse App\\Domain\\Repositories\\TransactionRepositoryInterface;\nuse DateTime;\nuse Exception;\nclass TransactionHandler\n{\n    \/**\n     * @var TransactionRepositoryInterface\n     *\/\n    private TransactionRepositoryInterface $repository;\n    \/**\n     * @var TaxCalculator\n     *\/\n    private TaxCalculator $taxCalculator;\n    \/**\n     * @var FraudChecker\n     *\/\n    private FraudChecker $fraudChecker;\n    \/**\n     * @var Notifier\n     *\/\n    private Notifier $notifier;\n    public function __construct(TransactionRepositoryInterface $repository, TaxCalculator $taxCalculator, FraudChecker $fraudChecker, Notifier $notifier)\n    {\n        $this->repository = $repository;\n        $this->taxCalculator = $taxCalculator;\n        $this->fraudChecker = $fraudChecker;\n        $this->notifier = $notifier;\n    }\n    \/**\n     * @throws Exception\n     *\/\n    public function create(Transaction $transaction) : Transaction\n    {\n        \/**\n         * Draco: Aqui valida se pode fazer a transa\u00e7\u00e3o, a Granger falou que tem uns chamados estranhos dizendo que\n         * o cliente t\u00e1 conseguindo sacar dinheiro da carteira do lojista, mas com certeza \u00e9 culpa da empresa\n         * que faz a analise anti fraude, eles s\u00e3o trouxas n\u00e9? Meu sistema n\u00e3o pode fazer nada pra resolver isso.\n         *\/\n        if ($this->fraudChecker->check($transaction)) {\n            throw new Exception(\"Deu erro aqui.\");\n        }\n        \/**\n         * Goyle: esse trecho de c\u00f3digo calcula o valor total com a taxa do sonserinapay, pra saber o valor total da taxa tem\n         * que calcular inicialAmount + sellerTaxa - valorTotalWithTax = taxaSonserinaPay\n         * pra saber o total de taxas tem que somar a taxa do sonserinapay com a taxa do lojista\n         * mas eu n\u00e3o sei pra que isso serve n\u00e3o, s\u00f3 fix o que o Draco me mandou fazer\n         *\/\n        $totalValueComTaxas = $this->taxCalculator->calculate($transaction->getInitialAmount(), $transaction->getSellerTax());\n        \/**\n         * Draco: Salva a data de cria\u00e7\u00e3o da transa\u00e7\u00e3o\n         *\/\n        $transaction->setCreatedDate(new DateTime());\n        \/**\n         * Draco: Era pra notificar o cliente e o lojista n\u00e9? Mas esse cara t\u00e1 dando problema, com certeza\n         * \u00e9 culpa do Crabbe que n\u00e3o fez a classe de notifica\u00e7\u00e3o direito\n         *\/\n        \/\/        $this->notifier->notify($transaction);\n        \/**\n         * Crabbe: Aqui salva a transa\u00e7\u00e3o\n         * Draco: As vezes a gente da erro na hora de salvar ai a gente j\u00e1 mandou notifica\u00e7\u00e3o pro cliente, mas paci\u00eancia n\u00e9?\n         *\/\n        return $this->repository->save($transaction);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TransactionHandler.php","originalStartLine":57},"diff":"--- Original\n+++ New\n@@ @@\n          * o cliente t\u00e1 conseguindo sacar dinheiro da carteira do lojista, mas com certeza \u00e9 culpa da empresa\n          * que faz a analise anti fraude, eles s\u00e3o trouxas n\u00e9? Meu sistema n\u00e3o pode fazer nada pra resolver isso.\n          *\/\n-        if (!$this->fraudChecker->check($transaction)) {\n+        if ($this->fraudChecker->check($transaction)) {\n             throw new Exception(\"Deu erro aqui.\");\n         }\n         \/**","processOutput":""},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Entities\\Transaction;\nuse App\\Domain\\Repositories\\TransactionRepositoryInterface;\nuse DateTime;\nuse Exception;\nclass TransactionHandler\n{\n    \/**\n     * @var TransactionRepositoryInterface\n     *\/\n    private TransactionRepositoryInterface $repository;\n    \/**\n     * @var TaxCalculator\n     *\/\n    private TaxCalculator $taxCalculator;\n    \/**\n     * @var FraudChecker\n     *\/\n    private FraudChecker $fraudChecker;\n    \/**\n     * @var Notifier\n     *\/\n    private Notifier $notifier;\n    public function __construct(TransactionRepositoryInterface $repository, TaxCalculator $taxCalculator, FraudChecker $fraudChecker, Notifier $notifier)\n    {\n        $this->repository = $repository;\n        $this->taxCalculator = $taxCalculator;\n        $this->fraudChecker = $fraudChecker;\n        $this->notifier = $notifier;\n    }\n    \/**\n     * @throws Exception\n     *\/\n    public function create(Transaction $transaction) : Transaction\n    {\n        \/**\n         * Draco: Aqui valida se pode fazer a transa\u00e7\u00e3o, a Granger falou que tem uns chamados estranhos dizendo que\n         * o cliente t\u00e1 conseguindo sacar dinheiro da carteira do lojista, mas com certeza \u00e9 culpa da empresa\n         * que faz a analise anti fraude, eles s\u00e3o trouxas n\u00e9? Meu sistema n\u00e3o pode fazer nada pra resolver isso.\n         *\/\n        if (!$this->fraudChecker->check($transaction)) {\n            throw new Exception(\"Deu erro aqui.\");\n        }\n        \/**\n         * Goyle: esse trecho de c\u00f3digo calcula o valor total com a taxa do sonserinapay, pra saber o valor total da taxa tem\n         * que calcular inicialAmount + sellerTaxa - valorTotalWithTax = taxaSonserinaPay\n         * pra saber o total de taxas tem que somar a taxa do sonserinapay com a taxa do lojista\n         * mas eu n\u00e3o sei pra que isso serve n\u00e3o, s\u00f3 fix o que o Draco me mandou fazer\n         *\/\n        $totalValueComTaxas = $this->taxCalculator->calculate($transaction->getInitialAmount(), $transaction->getSellerTax());\n        \/**\n         * Draco: Salva a data de cria\u00e7\u00e3o da transa\u00e7\u00e3o\n         *\/\n        $transaction->setCreatedDate(new DateTime());\n        \/**\n         * Draco: Era pra notificar o cliente e o lojista n\u00e9? Mas esse cara t\u00e1 dando problema, com certeza\n         * \u00e9 culpa do Crabbe que n\u00e3o fez a classe de notifica\u00e7\u00e3o direito\n         *\/\n        \/\/        $this->notifier->notify($transaction);\n        \/**\n         * Crabbe: Aqui salva a transa\u00e7\u00e3o\n         * Draco: As vezes a gente da erro na hora de salvar ai a gente j\u00e1 mandou notifica\u00e7\u00e3o pro cliente, mas paci\u00eancia n\u00e9?\n         *\/\n        return $this->repository->save($transaction);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Entities\\Transaction;\nuse App\\Domain\\Repositories\\TransactionRepositoryInterface;\nuse DateTime;\nuse Exception;\nclass TransactionHandler\n{\n    \/**\n     * @var TransactionRepositoryInterface\n     *\/\n    private TransactionRepositoryInterface $repository;\n    \/**\n     * @var TaxCalculator\n     *\/\n    private TaxCalculator $taxCalculator;\n    \/**\n     * @var FraudChecker\n     *\/\n    private FraudChecker $fraudChecker;\n    \/**\n     * @var Notifier\n     *\/\n    private Notifier $notifier;\n    public function __construct(TransactionRepositoryInterface $repository, TaxCalculator $taxCalculator, FraudChecker $fraudChecker, Notifier $notifier)\n    {\n        $this->repository = $repository;\n        $this->taxCalculator = $taxCalculator;\n        $this->fraudChecker = $fraudChecker;\n        $this->notifier = $notifier;\n    }\n    \/**\n     * @throws Exception\n     *\/\n    public function create(Transaction $transaction) : Transaction\n    {\n        \/**\n         * Draco: Aqui valida se pode fazer a transa\u00e7\u00e3o, a Granger falou que tem uns chamados estranhos dizendo que\n         * o cliente t\u00e1 conseguindo sacar dinheiro da carteira do lojista, mas com certeza \u00e9 culpa da empresa\n         * que faz a analise anti fraude, eles s\u00e3o trouxas n\u00e9? Meu sistema n\u00e3o pode fazer nada pra resolver isso.\n         *\/\n        if (!$this->fraudChecker->check($transaction)) {\n            new Exception(\"Deu erro aqui.\");\n        }\n        \/**\n         * Goyle: esse trecho de c\u00f3digo calcula o valor total com a taxa do sonserinapay, pra saber o valor total da taxa tem\n         * que calcular inicialAmount + sellerTaxa - valorTotalWithTax = taxaSonserinaPay\n         * pra saber o total de taxas tem que somar a taxa do sonserinapay com a taxa do lojista\n         * mas eu n\u00e3o sei pra que isso serve n\u00e3o, s\u00f3 fix o que o Draco me mandou fazer\n         *\/\n        $totalValueComTaxas = $this->taxCalculator->calculate($transaction->getInitialAmount(), $transaction->getSellerTax());\n        \/**\n         * Draco: Salva a data de cria\u00e7\u00e3o da transa\u00e7\u00e3o\n         *\/\n        $transaction->setCreatedDate(new DateTime());\n        \/**\n         * Draco: Era pra notificar o cliente e o lojista n\u00e9? Mas esse cara t\u00e1 dando problema, com certeza\n         * \u00e9 culpa do Crabbe que n\u00e3o fez a classe de notifica\u00e7\u00e3o direito\n         *\/\n        \/\/        $this->notifier->notify($transaction);\n        \/**\n         * Crabbe: Aqui salva a transa\u00e7\u00e3o\n         * Draco: As vezes a gente da erro na hora de salvar ai a gente j\u00e1 mandou notifica\u00e7\u00e3o pro cliente, mas paci\u00eancia n\u00e9?\n         *\/\n        return $this->repository->save($transaction);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TransactionHandler.php","originalStartLine":58},"diff":"--- Original\n+++ New\n@@ @@\n          * que faz a analise anti fraude, eles s\u00e3o trouxas n\u00e9? Meu sistema n\u00e3o pode fazer nada pra resolver isso.\n          *\/\n         if (!$this->fraudChecker->check($transaction)) {\n-            throw new Exception(\"Deu erro aqui.\");\n+            new Exception(\"Deu erro aqui.\");\n         }\n         \/**\n          * Goyle: esse trecho de c\u00f3digo calcula o valor total com a taxa do sonserinapay, pra saber o valor total da taxa tem","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Entities\\Transaction;\nuse App\\Domain\\Repositories\\TransactionRepositoryInterface;\nuse DateTime;\nuse Exception;\nclass TransactionHandler\n{\n    \/**\n     * @var TransactionRepositoryInterface\n     *\/\n    private TransactionRepositoryInterface $repository;\n    \/**\n     * @var TaxCalculator\n     *\/\n    private TaxCalculator $taxCalculator;\n    \/**\n     * @var FraudChecker\n     *\/\n    private FraudChecker $fraudChecker;\n    \/**\n     * @var Notifier\n     *\/\n    private Notifier $notifier;\n    public function __construct(TransactionRepositoryInterface $repository, TaxCalculator $taxCalculator, FraudChecker $fraudChecker, Notifier $notifier)\n    {\n        $this->repository = $repository;\n        $this->taxCalculator = $taxCalculator;\n        $this->fraudChecker = $fraudChecker;\n        $this->notifier = $notifier;\n    }\n    \/**\n     * @throws Exception\n     *\/\n    public function create(Transaction $transaction) : Transaction\n    {\n        \/**\n         * Draco: Aqui valida se pode fazer a transa\u00e7\u00e3o, a Granger falou que tem uns chamados estranhos dizendo que\n         * o cliente t\u00e1 conseguindo sacar dinheiro da carteira do lojista, mas com certeza \u00e9 culpa da empresa\n         * que faz a analise anti fraude, eles s\u00e3o trouxas n\u00e9? Meu sistema n\u00e3o pode fazer nada pra resolver isso.\n         *\/\n        if (!$this->fraudChecker->check($transaction)) {\n            throw new Exception(\"Deu erro aqui.\");\n        }\n        \/**\n         * Goyle: esse trecho de c\u00f3digo calcula o valor total com a taxa do sonserinapay, pra saber o valor total da taxa tem\n         * que calcular inicialAmount + sellerTaxa - valorTotalWithTax = taxaSonserinaPay\n         * pra saber o total de taxas tem que somar a taxa do sonserinapay com a taxa do lojista\n         * mas eu n\u00e3o sei pra que isso serve n\u00e3o, s\u00f3 fix o que o Draco me mandou fazer\n         *\/\n        $totalValueComTaxas = $this->taxCalculator->calculate($transaction->getInitialAmount(), $transaction->getSellerTax());\n        \/**\n         * Draco: Salva a data de cria\u00e7\u00e3o da transa\u00e7\u00e3o\n         *\/\n        $transaction->setCreatedDate(new DateTime());\n        \/**\n         * Draco: Era pra notificar o cliente e o lojista n\u00e9? Mas esse cara t\u00e1 dando problema, com certeza\n         * \u00e9 culpa do Crabbe que n\u00e3o fez a classe de notifica\u00e7\u00e3o direito\n         *\/\n        \/\/        $this->notifier->notify($transaction);\n        \/**\n         * Crabbe: Aqui salva a transa\u00e7\u00e3o\n         * Draco: As vezes a gente da erro na hora de salvar ai a gente j\u00e1 mandou notifica\u00e7\u00e3o pro cliente, mas paci\u00eancia n\u00e9?\n         *\/\n        return $this->repository->save($transaction);\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace App\\Domain\\Services;\n\nuse App\\Domain\\Entities\\Transaction;\nuse App\\Domain\\Repositories\\TransactionRepositoryInterface;\nuse DateTime;\nuse Exception;\nclass TransactionHandler\n{\n    \/**\n     * @var TransactionRepositoryInterface\n     *\/\n    private TransactionRepositoryInterface $repository;\n    \/**\n     * @var TaxCalculator\n     *\/\n    private TaxCalculator $taxCalculator;\n    \/**\n     * @var FraudChecker\n     *\/\n    private FraudChecker $fraudChecker;\n    \/**\n     * @var Notifier\n     *\/\n    private Notifier $notifier;\n    public function __construct(TransactionRepositoryInterface $repository, TaxCalculator $taxCalculator, FraudChecker $fraudChecker, Notifier $notifier)\n    {\n        $this->repository = $repository;\n        $this->taxCalculator = $taxCalculator;\n        $this->fraudChecker = $fraudChecker;\n        $this->notifier = $notifier;\n    }\n    \/**\n     * @throws Exception\n     *\/\n    public function create(Transaction $transaction) : Transaction\n    {\n        \/**\n         * Draco: Aqui valida se pode fazer a transa\u00e7\u00e3o, a Granger falou que tem uns chamados estranhos dizendo que\n         * o cliente t\u00e1 conseguindo sacar dinheiro da carteira do lojista, mas com certeza \u00e9 culpa da empresa\n         * que faz a analise anti fraude, eles s\u00e3o trouxas n\u00e9? Meu sistema n\u00e3o pode fazer nada pra resolver isso.\n         *\/\n        if (!$this->fraudChecker->check($transaction)) {\n            throw new Exception(\"Deu erro aqui.\");\n        }\n        \/**\n         * Goyle: esse trecho de c\u00f3digo calcula o valor total com a taxa do sonserinapay, pra saber o valor total da taxa tem\n         * que calcular inicialAmount + sellerTaxa - valorTotalWithTax = taxaSonserinaPay\n         * pra saber o total de taxas tem que somar a taxa do sonserinapay com a taxa do lojista\n         * mas eu n\u00e3o sei pra que isso serve n\u00e3o, s\u00f3 fix o que o Draco me mandou fazer\n         *\/\n        $totalValueComTaxas = $this->taxCalculator->calculate($transaction->getInitialAmount(), $transaction->getSellerTax());\n        \n        \/**\n         * Draco: Era pra notificar o cliente e o lojista n\u00e9? Mas esse cara t\u00e1 dando problema, com certeza\n         * \u00e9 culpa do Crabbe que n\u00e3o fez a classe de notifica\u00e7\u00e3o direito\n         *\/\n        \/\/        $this->notifier->notify($transaction);\n        \/**\n         * Crabbe: Aqui salva a transa\u00e7\u00e3o\n         * Draco: As vezes a gente da erro na hora de salvar ai a gente j\u00e1 mandou notifica\u00e7\u00e3o pro cliente, mas paci\u00eancia n\u00e9?\n         *\/\n        return $this->repository->save($transaction);\n    }\n}","originalFilePath":"\/Users\/diegoferreira\/Projects\/picpay-php-test\/src\/App\/Domain\/Services\/TransactionHandler.php","originalStartLine":72},"diff":"--- Original\n+++ New\n@@ @@\n          * mas eu n\u00e3o sei pra que isso serve n\u00e3o, s\u00f3 fix o que o Draco me mandou fazer\n          *\/\n         $totalValueComTaxas = $this->taxCalculator->calculate($transaction->getInitialAmount(), $transaction->getSellerTax());\n-        \/**\n-         * Draco: Salva a data de cria\u00e7\u00e3o da transa\u00e7\u00e3o\n-         *\/\n-        $transaction->setCreatedDate(new DateTime());\n+        \n         \/**\n          * Draco: Era pra notificar o cliente e o lojista n\u00e9? Mas esse cara t\u00e1 dando problema, com certeza\n          * \u00e9 culpa do Crabbe que n\u00e3o fez a classe de notifica\u00e7\u00e3o direito","processOutput":""}]}